# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches:    
      - '**'        # matches every branch
  pull_request:
    branches:    
      - '**'        # matches every branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  format:
    runs-on: ubuntu-latest
    container:
      image: docker.io/jsleight1/pydata:3.10-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Format code
        run: |
          pip install black
          poetry run black . --check --verbose --diff --color
  test:
    runs-on: ubuntu-latest
    container:
      image: docker.io/jsleight1/pydata:3.10-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          poetry --version
          poetry check
          poetry run pytest
  coverage:
    runs-on: ubuntu-latest
    container:
      image: docker.io/jsleight1/pydata:3.10-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate coverage report
        run: |
          pip install anybadge
          apt-get install jq
          poetry --version
          poetry check
          poetry run coverage run -m pytest
          poetry run coverage json
          covn=$(cat coverage.json | jq '.["totals"]["percent_covered_display"]' | sed 's/"//g')%
          echo $covn
          anybadge --label="Coverage" --value=$covn --file=coverage.svg 25=red 50=orange 75=yellow 100=green
        
  readme:
    runs-on: ubuntu-latest
    container:
      image: docker.io/jsleight1/pydata:3.10-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check readme builds
        run: |
          quarto --version
          quarto render README.qmd
