---
title: "Exploratory data analysis using pydata"
format: 
    gfm:
        preview-mode: raw
---

## `pydata`

`pydata` is a python package developed for the analysis and visualisation of 
L-shaped datasets. It can either be installed locally using `poetry` or an 
docker container environment has also be created which can be used for 
development and running the following examples.

`docker run -it docker.io/jsleight1/pydata:3.10-latest`

## Pydata generation and handling

```{python}
import matplotlib.pyplot as plt
from pydata.pydata import pydata

x=pydata.example_pydata(type="iris")
print(x)
```

```{python}
print(x.data)
```

```{python}
print(x.description.head(2))
```

```{python}
print(x.annotation)
```

```{python}
s=x.subset(
    samples=["Sample1", "Sample30", "Sample52"], 
    features=["sepal_length", "petal_length"]
)
print(s)
```

```{python}
t=x.transpose()
print(t)
```

## Dimension reduction

### PCA
```{python}
x.perform_dimension_reduction("pca")

print(x.pcs)
```

```{python}
print(x.pcs.data)
```

```{python}
print(x.pcs.description)
```

```{python}
print(x.pcs.annotation)
```

### LDA
```{python}
x.perform_dimension_reduction("lda", target="Species")
```

```{python}
print(x.lda)
```

```{python}
print(x.lda.data)
```

### t-SNE
```{python}
x.perform_dimension_reduction("tsne")
```

```{python}
print(x.tsne)
```

```{python}
print(x.tsne.data)
```

## Plotting

```{python}
x.plot(type="pca", colour_by="Species")
```

```{python}
x.plot(type="lda")
```

```{python}
x.plot(type="tsne", colour_by="Species")
```

```{python}
x.transpose().plot(type="violin", fill=False)
```

```{python}
x.plot(
    type="feature_heatmap", 
    annotate_samples_by=["Species"], 
    annotate_features_by=["type"], 
    xticklabels=False
)
```

```{python}
x.plot(
    type="correlation_heatmap", 
    annotate_samples_by=["Species"], 
    xticklabels=False,
    yticklabels=False
)
```

```{python}
x.plot(type="distribution", kind="kde", legend=False)
```

```{python}
x.transpose().subset(["sepal_length"]).plot(type="distribution", kde=True)
```

```{python}
x.transpose().plot(type="distribution", kind="ecdf")
```

```{python}
x.transpose().plot(type="scatter", xaxis="petal_length", yaxis="sepal_length")
```
